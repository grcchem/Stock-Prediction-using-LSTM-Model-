# LSTM to predict google stock price 

import pandas_datareader as pdr
key = "************************"
df = pdr.get_data_tiingo("GOOG", api_key = key)
df.to_csv("GOOG.csv")

import pandas as pd
df = pd.read_csv("GOOG.csv")
df.head()

df1 = df.reset_index()["close"]

import matplotlib.pyplot as plt
plt.plot(df1)

import numpy as np
from sklearn.preprocessing import MinMaxScaler
scalar = MinMaxScaler(feature_range=(0,1))
df1 = scalar.fit_transform(np.array(df1).reshape(-1,1))

training_size = int(len(df1)*0.65)
test_size = len(df1)-training_size

train_data,test_data = df1[0:training_size,:], df1[training_size:len(df1),:]

def create_dataset(dataset,timestep):
  dataX,dataY = [],[]
  for i in range(len(dataset)-timestep-1):
    dataX.append( dataset[i:(timestep+i),0] )
    dataY.append( dataset[timestep+i, 0] )
  return np.array(dataX), np.array(dataY)

timestep = 100
X_train, y_train = create_dataset(train_data,timestep)
X_test, y_test = create_dataset(test_data, timestep)
X_test.shape

X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# LSTM MOdel
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM

model = Sequential()
model.add(LSTM(50,return_sequences=True,input_shape=(100,1)))
model.add(LSTM(50, return_sequences=True))
model.add(LSTM(50))
model.add(Dense(1))
model.compile(loss='mean_squared_error',optimizer='adam')
model.summary()

model.fit(X_train,y_train,validation_data=(X_test,y_test), epochs=12, batch_size = 64, verbose=1)
train_predict = model.predict(X_train)
train_predict = scalar.inverse_transform(train_predict)
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_train,train_predict))

test_predict = model.predict(X_test)
test_predict = scalar.inverse_transform(test_predict)
import math
from sklearn.metrics import mean_squared_error
math.sqrt(mean_squared_error(y_test, test_predict))

### Plotting 
# shift train predictions for plotting
trainPredictPlot = np.empty_like(df1)
trainPredictPlot[:, :] = np.nan
trainPredictPlot[100:716, :] = train_predict

# shift test predictions for plotting
testPredictPlot = np.empty_like(df1)
testPredictPlot[:, :] = np.nan
testPredictPlot[919:1259, :] = test_predict

plt.plot(scalar.inverse_transform(df1))
plt.plot(trainPredictPlot)
plt.plot(testPredictPlot)
plt.show()
